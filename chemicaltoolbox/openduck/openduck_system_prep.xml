<tool id="openduck_system_prep" name="System preparation" version="@VERSION@">
    <description>for dynamic undocking</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <command detect_errors="exit_code"><![CDATA[
        cp $ligand ./ligand.sdf &&
        cp $ligand ./ligand2.sdf &&
        duck_prepare_sys
            -p '$protein'
            -l `pwd`/ligand.sdf
            -c '$chunk'
            ## -i is interaction, e.g. A_ASP_156_OD2
            -i ${chain_sel}_${res_sel}_${resid_sel}_${atom_sel} &&
        tar -czf allfiles.tar.gz --exclude=allfiles.tar.gz *
    ]]></command>
    <inputs>
        <param argument="protein" type="data" format='pdb' label="PDB file for apoprotein"/>
        <param argument="ligand" type="data" format='sdf,mol' label="SDF/MOL file containing a single ligand"/>
        <param argument="chunk" type="data" format='pdb' label="Chunk" help="PDB file produced by chunk tool."/>
        
        <expand macro="interaction_params" />
    </inputs>
    <outputs>
        <data name="eql" format="binary" from_work_dir="equil.chk"/>
        <data name="pkl" format="binary" from_work_dir="complex_system.pickle"/>
        <data name="tar" hidden="true" format="tar" from_work_dir="allfiles.tar.gz"/>
    </outputs>
    <tests>
        <test>
            <param name="protein" value="1n2v_apo.pdb" />
            <param name="ligand" value="ligand.mol" />
            <param name="chunk" value="protein_out_prot.pdb" />
            <param name="chain_sel" value="A" />
            <param name="res_sel" value="ASP" />
            <param name="resid_sel" value="156" />
            <param name="atom_sel" value="OD2" />
            <output name="eql" >
                <assert_contents>
                    <has_size value="338497" delta="5"/>
                </assert_contents>
            </output>
            <output name="pkl" >
                <assert_contents>
                    <has_size value="1618464" delta="5"/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[

.. class:: infomark

**What it does**

Perform system preparation (topology preparation, combination and equilibration) prior to dynamic undocking.

_____

.. class:: infomark

**Input**

       - PDB file for apoprotein
       - PDB file for chunk
       - SDF/MOL file for ligand
     
_____

        
.. class:: infomark

**Output**

       - Python pickle file containing the prepared complex as an OpenMM object
       - Chunk file for the equilibrated protein.

    ]]></help>

    <expand macro="citations" />
</tool>