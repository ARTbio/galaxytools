<tool id="rnazFilter" name="rnazFilter.pl" version="0.1.0">
    <requirements>
        <requirement type="package">rnaz</requirement>
    </requirements>
    <command detect_errors="exit_code"><![CDATA[
    rnazFilter.pl
    #if $count:
    $count
    #end if
	'"$filter"'
	'$input'
    > '$output' 
    ]]></command>
    <inputs>
        <param type="data" name="input" format="text" />
        <param type="text" name="filter" format="text" value="P>0.9" label="Filter to use on rnaz results, e.g. P>0.9. "/>
        <param argument="--count" type="boolean" checked="false" truevalue="--count" falsevalue="" label="Count windows/loci instead of printing them" />
    </inputs>
    <outputs>
        <data name="output" format="data"/>
    </outputs>
	<options sanitize="False"/>
    <tests>
        <test>
            <param name="input" value="tRNA1.rnaz.clustered"/>
            <param name="filter" value="z>1"/>
            <output name="output" file="tRNA1.rnaz.filtered"/>
        </test>
        <test>
            <param name="input" value="tRNA2.rnaz.clustered"/>
            <param name="filter" value="minZ<-0.5" />
            <output name="output" file="tRNA2.rnaz.filtered"/>
        </test>
    </tests>
    <help><![CDATA[

    Usage: rnazFilter.pl [options] filter [file]

    Options: 
    -c, --count Count the windows/loci instead of printing
    them.

    Filter: Filtering the tab-delimited data files using standard UNIX
    tools like grep or awk is difficult because of the special
    window/locus grouping of the data. You can use the rnazFilter.pl
    program. The filter statement uses the field names (e.g.
    z,SCI,combPerPair for a complete list) and standard
    logical operators as used in the Perl language: (greater than),
    (smaller than), (equals numerically), eq (equals string), not,
    and, or, regex (pattern match). In addition you can use
    brackets to group and combine statements.

    FIELDS
    1. windowID
    Consecutive numbered ID for each window

    2. locusID
    The locus which this window belongs to

    3. seqID
    Identifier of the sequence (e.g. human.chr1 or contig42)

    4. start
    Start position of the reference sequence in the window

    5. end  End position of the reference sequence in the window

    6. strand
    Indicates if the reference sequence is from the positive or
    negative strand

    7. N    Number of sequences in the alignment

    8. columns
    Number of columns in the alignment

    9. identity
    Mean pairwise identity of the alignment

    10. meanMFE
    Mean minimum free energy of the single sequences as calculated by
    the RNAfold algorithm

    11. consensusMFE
    Consensus MFE for the alignment as calculated by the RNAalifold
    algorithm

    12. energyTerm
    Contribution to the consensus MFE which comes from the energy part
    of the RNAalifold algorithm

    13. covarianceTerm
    Contribution to the consensus MFE which comes from the covariance
    part of the RNAalifold algorithm

    14. combPerPair
    Number of different base combinations per predicted pair in the
    consensus seconary structure

    15. z   Mean z-score of the sequences in the alignment

    16. SCI Structure conservation index for the alignment

    17. decValue
    Support vector machine decision value

    18. P   RNA class probability as calculated by the SVM

    19. COL#
    Specify a particular column by its index #. First column has index
    1. e.g. COL18>0.9 is equivalent to P>0.9


    ]]></help>
    
    <citations>
        <citation type="doi">10.1142/9789814295291_0009</citation>
    </citations>    

</tool>
