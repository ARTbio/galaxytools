<tool id="par_coord_plotting" name="Parallel Coordinates Plot" version="0.1">
    <description>of tabular data</description>
    <requirements>
        <requirement type="package" version="2.7">python</requirement>
        <requirement type="package" version="0.22.0">pandas</requirement>
        <requirement type="package" version="3.1.1">plotly</requirement>
    </requirements>
    <version_command>echo $version</version_command>
    <stdio>
        <exit_code range="1:" level="fatal" description="Error occurred. Please check Tool Standard Error"/>
    </stdio>
    <command><![CDATA[
    python '$plot_script'
]]>
    </command>
    <configfiles>
        <configfile name="plot_script">
<![CDATA[
import plotly
import plotly.graph_objs as go
import pandas as pd

df = pd.read_csv("$search_results", sep='\t', parse_dates=True)

dimensions = []
col_dimensions = [int(x)-1 for x in "$col_dimensions".split(',')]
for col in col_dimensions:
    values = df[df.columns[col]]
    if all(type(e) in [int, long, float, complex] for e in values ):
        dimensions.append(
            dict(   values = values,
                    label = df.columns[col])
        )
    else:
        unique_values = list(set(values))
        dimensions.append(
            dict(   range = [0, len(unique_values)-1],
                    tickvals = range(len(unique_values)),
                    ticktext = [str(e) for e in unique_values],
                    values = map(lambda e: unique_values.index(e), values ),
                    label = df.columns[col])
        )

col_score = $col_score - 1
scores = df[df.columns[col_score]]
line = dict(
            color = scores,
            colorscale = 'Jet',
            showscale = True,
            reversescale = True
)
data = [
    go.Parcoords(
        line = line,
        dimensions = dimensions
    )
]

plotly.offline.plot(data, filename = "output.html", auto_open=False)


]]>
        </configfile>
    </configfiles>
    <inputs>
        <param name="search_results" type="data" format="tabular" label="Select a result from SearchCV:"/>
        <param name="col_dimensions" multiple="true" type="data_column" data_ref="search_results" use_header_names="true" display="checkboxes" label="Select the columns for dimentions:"/>
        <param name="col_score" type="data_column" data_ref="search_results" use_header_names="true" label="Select a column containg the values for coloring:" help="e.g. mean_test_score"/>
    </inputs>

    <outputs>
        <data name="output" format="html" from_work_dir="output.html" label="Plot visualization of SearchCV result on ${on_string}"/>
    </outputs>
    <tests>
        <test>
            <param name="search_results" value="parcoords01.tabular" ftype="tabular"/>
            <param name="col_dimensions" value="4,5"/>
            <param name="col_score" value="3"/>
            <output name="output" file="parcoords_plot01.html" compare="sim_size"/>
        </test>
        <test>
            <param name="search_results" value="parcoords02.tabular" ftype="tabular"/>
            <param name="col_dimensions" value="4,5"/>
            <param name="col_score" value="3"/>
            <output name="output" file="parcoords_plot02.html" compare="sim_size"/>
        </test>
    </tests>
    <help><![CDATA[
**What it does**
Produce a parallel coordinates plot from a tabular file. Multiple columns are chosen for dimensions and a single column for coloring. The plot is buried in a html file which
provides rich interactive features. Image can be saved in various format, such as 'png', 'svg', 'jpeg' and so on.

Refer to: `https://plot.ly/python/parallel-coordinates-plot/`_

.. _`https://plot.ly/python/parallel-coordinates-plot/`: https://plot.ly/python/parallel-coordinates-plot/

    ]]>
    </help>
</tool>
