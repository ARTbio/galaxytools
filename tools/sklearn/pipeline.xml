<tool id="sklearn_build_pipeline" name="Pipeline Builder" version="@VERSION@">
    <description>constructs a list of transforms and a final estimator</description>
    <macros>
        <import>main_macros.xml</import>
    </macros>
    <expand macro="python_requirements"/>
    <expand macro="macro_stdio"/>
    <version_command>echo "@VERSION@"</version_command>
    <command>
        <![CDATA[
        python "$sklearn_pipeline_script" '$inputs'
        ]]>
    </command>
    <configfiles>
        <inputs name="inputs" />
        <configfile name="sklearn_pipeline_script">
            <![CDATA[
import sys
import json
import pickle
import xgboost
import ast
import sklearn.feature_selection
from sklearn import preprocessing, svm, linear_model, ensemble, naive_bayes, tree, neighbors
from sklearn.pipeline import Pipeline

@GET_ESTIMATOR_FUNCTION@
@FEATURE_SELECTOR_FUNCTION@

input_json_path = sys.argv[1]
with open(input_json_path, "r") as param_handler:
    params = json.load(param_handler)

pipeline_steps = []

def get_component(input_json):
    if input_json['component_type'] == 'None':
        return
    if input_json['component_type'] == 'pre_processor':
        preprocessor = input_json["pre_processors"]["selected_pre_processor"]
        pre_processor_options = input_json["pre_processors"]["options"]
        my_class = getattr(preprocessing, preprocessor)
        return ('pre_processor', my_class(**pre_processor_options))
    if input_json['component_type'] == 'feature_selection':
        fs_obj = feature_selector(input_json['fs_algorithm_selector'])
        return ('feature_selector', fs_obj)

for c in params['pipeline_component']:
    (c_name, c_object) = get_component( c['component_selector'] )
    pipeline_steps.append( (c_name, c_object) )

# Set up final estimator and add to pipeline.
estimator_json = params["final_estimator"]['estimator_selector']
estimator = get_estimator(estimator_json)

pipeline_steps.append( ('estimator', estimator) )

pipeline = Pipeline(pipeline_steps)

with open("$outfile", 'wb') as out_handler:
    pickle.dump(pipeline, out_handler, pickle.HIGHEST_PROTOCOL)

            ]]>
        </configfile>
    </configfiles>
    <inputs>
        <repeat name="pipeline_component" min="1" max="5" title="Pre-fitting component">
            <conditional name="component_selector">
                <param name="component_type" type="select" label="Choose the type of component:">
                    <option value="none" selected="true">None</option>
                    <option value="pre_processor">Pre-processing</option>
                    <option value="feature_selection">Feature selection</option>
                    <option value="others">Others</option>
                </param>
                <when value="none"/>
                <when value="pre_processor">
                    <conditional name="pre_processors">
                        <expand macro="sparse_preprocessors_ext" />
                        <expand macro="sparse_preprocessor_options_ext" />
                    </conditional>
                </when>
                <when value="feature_selection">
                    <expand macro="feature_selection_all">
                        <expand macro="fs_selectfrommodel_no_prefitted"/>
                    </expand>
                </when>
                <when value="others">
                </when>
            </conditional>
        </repeat>
        <section name="final_estimator" title="Final Estimator" expanded="true">
            <expand macro="estimator_selector_all" />
        </section>
    </inputs>
    <outputs>
        <data format="zip" name="outfile"/>
    </outputs>
    <tests>
        <test>
            <conditional name="component_selector">
                <param name="component_type" value="pre_processor"/>
                <conditional name="pre_processors">
                    <param name="selected_pre_processor" value="RobustScaler"/>
                    </conditional>
            </conditional>
            <conditional name="component_selector">
                <param name="component_type" value="feature_selection"/>
                <conditional name="fs_algorithm_selector">
                    <param name="selected_algorithm" value="SelectKBest"/>
                    <param name="score_func" value="f_classif"/>
                </conditional>
            </conditional>
            <param name="selected_module" value="svm"/>
            <param name="selected_estimator" value="SVR"/>
            <param name="estimator_params" value="'kernel': 'linear'"/>
            <output name="outfile" file="pipeline01" compare="sim_size" delta="5"/>
        </test>
        <test>
            <conditional name="component_selector">
                <param name="component_type" value="pre_processor"/>
                <conditional name="pre_processors">
                    <param name="selected_pre_processor" value="RobustScaler"/>
                    </conditional>
            </conditional>
            <param name="selected_module" value="linear_model"/>
            <param name="selected_estimator" value="LassoCV"/>
            <output name="outfile" file="pipeline02" compare="sim_size" delta="5"/>
        </test>
        <test>
            <conditional name="component_selector">
                <param name="component_type" value="pre_processor"/>
                <conditional name="pre_processors">
                    <param name="selected_pre_processor" value="RobustScaler"/>
                    </conditional>
            </conditional>
            <param name="selected_module" value="xgboost"/>
            <param name="selected_estimator" value="XGBClassifier"/>
            <output name="outfile" file="pipeline03" compare="sim_size" delta="5"/>
        </test>
        <test>
            <conditional name="component_selector">
                <param name="component_type" value="feature_selection"/>
                <conditional name="fs_algorithm_selector">
                    <param name="selected_algorithm" value="SelectFromModel"/>
                    <conditional name="model_inputter">
                        <conditional name="estimator_selector">
                            <param name="selected_module" value="ensemble"/>
                            <param name="selected_estimator" value="AdaBoostClassifier"/>
                        </conditional>
                    </conditional>
                </conditional>
            </conditional>
            <section name="final_estimator">
                <param name="selected_module" value="svm"/>
                <param name="selected_estimator" value="LinearSVC"/>
            </section>
            <output name="outfile" file="pipeline04" compare="sim_size" delta="5"/>
        </test>
    </tests>
    <help>
        <![CDATA[
**What it does**
Constructs a pipeline that contains a list of transfroms and a final estimator. Pipeline assembles several steps
that can be cross-validated together while setting different parameters.
please refer to `Scikit-learn pipeline Pipeline`_.


**Estimator** selector supports estimators from `xgboost`_ and many scikit-learn modules, including `svm`_, `linear_model`_, `ensemble`_, `naive_bayes`_, `tree`_ and `neighbors`_.


.. _`Scikit-learn pipeline Pipeline`: http://scikit-learn.org/stable/modules/generated/sklearn.pipeline.Pipeline.html
.. _`svm`: http://scikit-learn.org/stable/modules/classes.html#module-sklearn.svm
.. _`linear_model`: http://scikit-learn.org/stable/modules/classes.html#module-sklearn.linear_model
.. _`ensemble`: http://scikit-learn.org/stable/modules/classes.html#module-sklearn.ensemble
.. _`naive_bayes`: http://scikit-learn.org/stable/modules/classes.html#module-sklearn.naive_bayes
.. _`tree`: http://scikit-learn.org/stable/modules/classes.html#module-sklearn.tree
.. _`neighbors`: http://scikit-learn.org/stable/modules/classes.html#module-sklearn.neighbors
.. _`xgboost`: https://xgboost.readthedocs.io/en/latest/python/python_api.html

        ]]>
    </help>
    <expand macro="sklearn_citation"/>
</tool>
