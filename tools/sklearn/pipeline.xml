<tool id="sklearn_pipeline" name="Build a Pipeline" version="@VERSION@">
    <description>that could be used in search cross validation and so on</description>
    <macros>
        <import>main_macros.xml</import>
    </macros>
    <expand macro="python_requirements"/>
    <expand macro="macro_stdio"/>
    <version_command>echo "@VERSION@"</version_command>
    <command>
        <![CDATA[
        python "$sklearn_pipeline_script" '$inputs'
        ]]>
    </command>
    <configfiles>
        <inputs name="inputs" />
        <configfile name="sklearn_pipeline_script">
            <![CDATA[
import sys
import json
import pickle
import sklearn.model_selection
from sklearn import svm, linear_model, ensemble, preprocessing
from sklearn.pipeline import Pipeline

@FEATURE_SELECTOR_FUNCTION@

input_json_path = sys.argv[1]
with open(input_json_path, "r") as param_handler:
    params = json.load(param_handler)

pipeline_steps = []

# Set up pre_processor and add to pipeline steps.
if params['pre_processing']['do_pre_processing'] == 'Yes':
    preprocessor = params["pre_processing"]["pre_processors"]["selected_pre_processor"]
    pre_processor_options = params["pre_processing"]["pre_processors"]["options"]
    my_class = getattr(preprocessing, preprocessor)
    pipeline_steps.append( ('pre_processor', my_class(**pre_processor_options)) )

# Set up feature selector and add to pipeline steps.
if params['feature_selection']['do_feature_selection'] == 'Yes':
    feature_selector = feature_selector(params['feature_selection']['feature_selection_algorithms'])
    pipeline_steps.append( ('feature_selector', feature_selector) )

# Set up estimator and add to pipeline.
estimator=params["main_estimator"]["estimator"]
if params["main_estimator"]["extra_estimator"]["has_estimator"] == 'no':
    estimator = params["main_estimator"]["extra_estimator"]["new_estimator"]
estimator = eval(estimator.replace('__dq__', '"').replace("__sq__","'"))

pipeline_steps.append( ('estimator', estimator) )

pipeline = Pipeline(pipeline_steps)

with open("$outfile", 'wb') as out_handler:
    pickle.dump(pipeline, out_handler, pickle.HIGHEST_PROTOCOL)

            ]]>
        </configfile>
    </configfiles>
    <inputs>
        <conditional name="pre_processing">
            <param name="do_pre_processing" type="select" label="Do pre_processing?">
                <option value="No" selected="true"/>
                <option value="Yes"/>
            </param>
            <when value="No"/>
            <when value="Yes">
                <conditional name="pre_processors">
                    <expand macro="sparse_preprocessors_ext" />
                    <expand macro="sparse_preprocessor_options_ext" />
                </conditional>
            </when>
        </conditional>
        <conditional name="feature_selection">
            <param name="do_feature_selection" type="select" label="Do feature selection?">
                <option value="No" selected="true"/>
                <option value="Yes"/>
            </param>
            <when value="No"/>
            <when value="Yes">
                <expand macro="feature_selection_all"/>
            </when>
        </conditional>
        <section name="main_estimator" title="Main Estimator" expanded="true">
            <expand macro="estimator_input_no_fit" />
        </section>
    </inputs>
    <outputs>
        <data format="zip" name="outfile"/>
    </outputs>
    <tests>
        <test>
            <param name="do_pre_processing" value="Yes"/>
            <param name="selected_pre_processor" value="RobustScaler"/>
            <param name="do_feature_selection" value="Yes"/>
            <param name="selected_algorithm" value="SelectKBest"/>
            <param name="score_func" value="f_classif"/>
            <param name="estimator" value="svm.SVR(kernel=&quot;linear&quot;)"/>
            <param name="has_estimator" value="yes"/>
            <output name="outfile" file="pipeline01" compare="sim_size" delta="500"/>
        </test>
        <test>
            <param name="do_pre_processing" value="Yes"/>
            <param name="selected_pre_processor" value="RobustScaler"/>
            <param name="estimator" value="linear_model.LassoCV()"/>
            <param name="has_estimator" value="yes"/>
            <output name="outfile" file="pipeline02" compare="sim_size" delta="500"/>
        </test>
    </tests>
    <help>
        <![CDATA[
**What it does**
This tool includes model validation functions to evaluate estimator performance in the cross-validation approach. This tool is based on
sklearn.model_selection package.
For information about classification metric functions and their parameter settings please refer to `Scikit-learn classification metrics`_.

.. _`Scikit-learn classification metrics`: http://scikit-learn.org/stable/modules/model_evaluation.html#classification-metrics
        ]]>
    </help>
    <expand macro="sklearn_citation"/>
</tool>
