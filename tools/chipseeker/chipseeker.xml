<tool id="chipseeker" name="ChIPseeker" version="1.14.2.1">
    <description>for ChIP peak annotation and visualization</description>
    <requirements>
        <requirement type="package" version="1.14.2">bioconductor-chipseeker</requirement>
        <requirement type="package" version="3.4.0">bioconductor-txdb.hsapiens.ucsc.hg38.knowngene</requirement>
        <requirement type="package" version="3.2.2">bioconductor-txdb.hsapiens.ucsc.hg19.knowngene</requirement>
        <requirement type="package" version="3.4.0">bioconductor-txdb.Mmusculus.UCSC.mm10.knownGene</requirement>
        <requirement type="package" version="3.5.0">bioconductor-org.hs.eg.db</requirement>
        <requirement type="package" version="3.5.0">bioconductor-org.mm.eg.db</requirement>
        <requirement type="package" version="1.4.4">r-optparse</requirement>
    </requirements>
    <version_command><![CDATA[
echo $(R --version | grep version | grep -v GNU)", ChIPseeker version" $(R --vanilla --slave -e "library(ChIPseeker); cat(sessionInfo()\$otherPkgs\$ChIPseeker\$Version)" 2> /dev/null | grep -v -i "WARNING: ")", TxDb.Hsapiens.UCSC.hg38.knownGene version" $(R --vanilla --slave -e "library(TxDb.Hsapiens.UCSC.hg38.knownGene); cat(sessionInfo()\$otherPkgs\$TxDb.Hsapiens.UCSC.hg38.knownGene\$Version)" 2> /dev/null | grep -v -i "WARNING: ")", TxDb.Hsapiens.UCSC.hg19.knownGene version" $(R --vanilla --slave -e "library(TxDb.Hsapiens.UCSC.hg19.knownGene); cat(sessionInfo()\$otherPkgs\$TxDb.Hsapiens.UCSC.hg19.knownGene\$Version)" 2> /dev/null | grep -v -i "WARNING: ")", TxDb.Mmusculus.UCSC.mm10.knownGene version" $(R --vanilla --slave -e "library(TxDb.Mmusculus.UCSC.mm10.knownGene); cat(sessionInfo()\$otherPkgs\$TxDb.Mmusculus.UCSC.mm10.knownGene\$Version)" 2> /dev/null | grep -v -i "WARNING: ")", org.Hs.eg.db version" $(R --vanilla --slave -e "library(org.Hs.eg.db); cat(sessionInfo()\$otherPkgs\$org.Hs.eg.db\$Version)" 2> /dev/null | grep -v -i "WARNING: ")", org.Mm.eg.db version" $(R --vanilla --slave -e "library(org.Mm.eg.db); cat(sessionInfo()\$otherPkgs\$org.Mm.eg.db\$Version)" 2> /dev/null | grep -v -i "WARNING: ")", optparse version" $(R --vanilla --slave -e "library(optparse); cat(sessionInfo()\$otherPkgs\$optparse\$Version)" 2> /dev/null | grep -v -i "WARNING: ")
    ]]></version_command>
    <command detect_errors="exit_code"><![CDATA[
        #set txdb = "txdb_source"
        #if $anno_source.anno_source_select == "history":
            ln -s '${anno_source.gtf_hist}' $txdb &&
        #else if $anno_source.anno_source_select == "cached":
            ln -s '${anno_source.gtf_builtin.fields.path}' $txdb &&
        #else:
            #set txdb = $anno_source.anno_source_select
        #end if

        #if $rscript:
            cp '$__tool_directory__/chipseeker.r' '$out_rscript' &&
        #end if

        Rscript '$__tool_directory__/chipseeker.r'

        -i '$peaks'
        -t '$txdb'
        -p $pdf
    ]]>
    </command>
    <inputs>
        <param name="peaks" type="data" format="bed,interval" label="Peaks file" help="A peaks file in BED format." />
        <conditional name="anno_source">
            <param name="anno_source_select" type="select" label="Annotation source" help="Select the annotation source. Options are built-in annotation for hg38, hg19 or mm10 (from UCSC) or you can provide a GTF.">
                <option value="hg38">hg38 UCSC knownGene</option>
                <option value="hg19">hg19 UCSC knownGene</option>
                <option value="mm10">mm10 UCSC knownGene</option>
                <option value="cached" selected="true">Use a built-in GTF</option>
                <option value="history">Use a GTF from history</option>
            </param>
            <when value="cached">
                 <param name="gtf_builtin" type="select" label="Select a built-in GTF" help="If the GTF file for your transcriptome of interest is not listed, contact your Galaxy administrator">
                     <options from_data_table="gene_sets">
                         <filter type="sort_by" column="2" />
                         <validator type="no_options" message="No GTF file is available." />
                     </options>
                 </param>
            </when>
            <when value="history">
                <param name="gtf_hist" type="data" format="gtf" label="Select a history GTF" />
            </when>
        </conditional>
        <param name="pdf" type="boolean" truevalue="True" falsevalue="" checked="True" label="Output PDF of plots?" help="Default: Yes" />
        <param name="rscript" type="boolean" truevalue="TRUE" falsevalue="FALSE" checked="False" label="Output Rscript?" help="If this option is set to Yes, the Rscript used to annotate the IDs will be provided as a text file in the output. Default: No" />
    </inputs>

        <outputs>
            <data name="out_tab" format="interval" from_work_dir="out.tab" label="${tool.name} on ${on_string}: Annotated Peaks" />
            <data name="out_plots" format="pdf" from_work_dir="out.pdf" label="${tool.name} on ${on_string}: Plots">
                <filter>pdf</filter>
            </data>
            <data name="out_rscript" format="txt" from_work_dir="out_rscript.txt" label="${tool.name} on ${on_string}: Rscript">
                <filter>rscript</filter>
            </data>
        </outputs>

    <tests>
        <!-- Ensure UCSC genomes work -->
        <test expect_num_outputs="3">
            <param name="peaks" value="in.bed" ftype="bed"/>
            <param name="anno_source_select" value="hg19"/>
            <param name="rscript" value="True"/>
            <output name="out_tab" file="out.tab" />
            <output name="out_plots" file="out.pdf" compare="sim_size"/>
            <output name="out_rscript" >
                <assert_contents>
                    <has_text_matching expression="peakAnno.*annotatePeak" />
                </assert_contents>
            </output>
        </test>
        <!-- Ensure history GTF works -->
        <test expect_num_outputs="2">
            <param name="peaks" value="in.ens.interval" ftype="interval"/>
            <param name="anno_source_select" value="history"/>
            <param name="gtf_hist" value="in.gtf"/>
            <output name="out_tab" file="outens.tab" />
            <output name="out_plots" file="outens.pdf" compare="sim_size"/>
        </test>
        <!-- Ensure built-in GTF works -->
        <test expect_num_outputs="2">
            <param name="peaks" value="in.ens.interval" ftype="interval"/>
            <param name="anno_source_select" value="cached"/>
            <output name="out_tab" file="outens.tab" />
            <output name="out_plots" file="out.pdf" compare="sim_size"/>
        </test>
    </tests>
    <help><![CDATA[

.. class:: infomark

**What it does**

ChIPseeker_ is a Bioconductor package for annotating ChIP-seq data analysis. See
the `ChIPseeker vignette`_ for more information.

-----

**Inputs**

A peaks file in BED or Interval format e.g from MACS2 or DiffBind.

Example:

    =====  ======  ======  ========  =====  ======
    Chrom  Start   End     Name      Score  Strand
    =====  ======  ======  ========  =====  ======
    chr18  394599  396513  DiffBind  0      .
    chr18  111566  112005  DiffBind  0      .
    chr18  346463  347342  DiffBind  0      .
    chr18  399013  400382  DiffBind  0      .
    chr18  371109  372102  DiffBind  0      .
    =====  ======  ======  ========  =====  ======

A GTF file for annotation (built-in UCSC annotation for hg38, hg19 and mm10 is available).

-----

**Outputs**

This tool outputs

    * a file of annotated peaks
    * a PDF of plots
    * the R script used by this tool

**Annotated peaks**

Annotation similar to below will be added to the input file.

Example:

    =====  ======  ======  =============================================================================================================================================================================
    Chrom  Start   End     Comment
    =====  ======  ======  =============================================================================================================================================================================
    chr18  394599  396513  DiffBind|0|.|Intron (uc002kkm.3/81035, intron 2 of 9)|18|319355|500729|181375|2|81035|uc002kkm.3| 104216|ENSG00000158270|COLEC12|collectin subfamily member 12
    chr18  111566  112005  DiffBind|0|.|Promoter (2-3kb)|18|109065|122222| 13158|1|727758|uc002kke.3|   2502|ENSG00000263006|ROCK1P1|Rho associated coiled-coil containing protein kinase 1 pseudogene 1
    chr18  346463  347342  DiffBind|0|.|Exon (uc002kkm.3/81035, exon 5 of 10)|18|225089|268059| 42971|2|9984|uc002kkl.2| -78405|ENSG00000079134|THOC1|THO complex 1
    chr18  399013  400382  DiffBind|0|.|Intron (uc002kkm.3/81035, intron 2 of 9)|18|319355|500729|181375|2|81035|uc002kkm.3| 100347|ENSG00000158270|COLEC12|collectin subfamily member 12
    chr18  371109  372102  DiffBind|0|.|Intron (uc002kkm.3/81035, intron 2 of 9)|18|225089|268059| 42971|2|9984|uc002kkl.2|-103051|ENSG00000079134|THOC1|THO complex 1
    =====  ======  ======  =============================================================================================================================================================================

    Columns contain the following data:

* **Chrom**: Chromosome name
* **Start**: Start position of site
* **End**: End position of site
* **Comment**: The pipe ("|") separated values in this column correspond to:

    * *<Any additional input columns>*
    * *annotation* (Promoter, 5’ UTR, 3’ UTR, Exon, Intron, Downstream, Intergenic)
    * *geneChr*
    * *geneStart*
    * *geneEnd*
    * *geneLength*
    * *geneStrand*
    * *geneId*
    * *transcriptId*
    * *distanceToTSS*

.. _ChIPseeker: https://bioconductor.org/packages/release/bioc/html/ChIPseeker.html
.. _`ChIPseeker vignette`: http://bioconductor.org/packages/release/bioc/vignettes/ChIPseeker/inst/doc/ChIPseeker.html

]]></help>
    <citations>
        <citation type="doi">10.1093/bioinformatics/btv145</citation>
    </citations>
</tool>
