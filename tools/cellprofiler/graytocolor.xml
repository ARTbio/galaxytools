<tool id="cp-graytocolor" name="GrayToColor" version="19.05">
  <description>module of CellProfiler v3.1.9</description>
  <requirements>
     <requirement type="package" version="2.7.16">python</requirement>
  </requirements>
  <macros>
    <import>macros.xml</import>
    <xml name="rgb">

      <param name="rgb_red" label="Select the image to be colored red" value="Leave this black" type="text"/>
      <param name="rgb_red_weight" label="Relative weight for the red image" optional="true" type="text"/>

      <param name="rgb_green" label="Select the image to be colored green" value="Leave this black" type="text"/>
      <param name="rgb_green_weight" label="Relative weight for the green image" optional="true" type="text"/>

      <param name="rgb_blue" label="Select the image to be colored blue" value="Leave this black" type="text"/>
      <param name="rgb_blue_weight" label="Relative weight for the blue image" optional="true" type="text"/>

      <param name="name_output_image" label="Name the output image" value="ColorImage" type="text"/>      
    </xml>
    <xml name="cmyk">

      <param name="cmyk_cyan" label="Select the image to be colored cyan" value="Leave this black" type="text"/>
      <param name="cmyk_cyan_weight" label="Relative weight for the cyan image" optional="true" type="text"/>

      <param name="cmyk_magenta" label="Select the image to be colored magenta" value="Leave this black" type="text"/>
      <param name="rgb_green_weight" label="Relative weight for the green image" optional="true" type="text"/>

      <param name="cmyk_yellow" label="Select the image to be colored yellow" value="Leave this black" type="text"/>
      <param name="cmyk_yellow_weight" label="Relative weight for the yellow image" optional="true" type="text"/>

      <param name="cmyk_brightness" label="Select the image that determines brightness" value="Leave this black" type="text"/>
      <param name="cmyk_brightness_weight" label="Relative weight for the brightness image" optional="true" type="text"/>

      <param name="name_output_image" label="Name the output image" value="ColorImage" type="text"/>  
      
    </xml>
    <xml name="stack">
      <param name="name_output_image" label="Name the output image" value="ColorImage" type="text"/>  
      <repeat name="rpt_image_name" title="Add another channel">
        <param name="image_name" type="text" label="Image name" />
      </repeat>
    </xml>
    <xml name="composite">
      <param name="name_output_image" label="Name the output image" value="ColorImage" type="text"/>  
      <repeat name="rpt_image_name" title="Add another channel">
        <param name="image_name" type="text" label="Image name" />
        <param name="color" type="color" label="Color" />
        <param name="weight" type="text" label="Weight" />
      </repeat>      
    </xml>
  </macros>
  <configfiles>
    <inputs name="inputs" filename="input.json" />

 <configfile name="script_file">
import json
import sys
import os

FOURSPACES="    "
NEWLINE="\n"

input_json_path = sys.argv[1]
input_pipeline= sys.argv[2]

params = json.load(open(input_json_path, "r"))



def writegtc():
  f.write(NEWLINE)

  f.write("GrayToColor:[module_num:"+str(new_count)+"|svn_version:\\'Unknown\\'|variable_revision_number:3|show_window:False|notes:\\x5B\\'Combine masks nuclei + nucleoli with colors\\'\\x5D|batch_state:array(\\x5B\x5D, dtype=uint8)|enabled:True|wants_pause:False]"+NEWLINE)  

  color_scheme = params['con_color_scheme']['color_scheme']

  rgb_blue = params['con_color_scheme']['rgb_blue'] if 'rgb_blue' in params['con_color_scheme'] else 'Leave this black'
  rgb_blue_weight = '1.0' if params['con_color_scheme']['rgb_blue_weight']== "" else params['con_color_scheme']['rgb_blue_weight']

  rgb_green = params['con_color_scheme']['rgb_green'] if 'rgb_green' in params['con_color_scheme'] else 'Leave this black'
  rgb_green_weight = '1.0' if params['con_color_scheme']['rgb_green_weight']== "" else params['con_color_scheme']['rgb_green_weight']

  rgb_red = params['con_color_scheme']['rgb_red'] if 'rgb_red' in params['con_color_scheme'] else 'Leave this black'
  rgb_red_weight = '1.0' if params['con_color_scheme']['rgb_red_weight']== "" else params['con_color_scheme']['rgb_red_weight']  

  name_output_image = params['con_color_scheme']['name_output_image']

  cmyk_cyan = params['con_color_scheme']['cmyk_cyan'] if 'cmyk_cyan' in params['con_color_scheme'] else 'Leave this black'

  if 'cmyk_cyan_weight' in params['con_color_scheme']:
    if params['con_color_scheme']['cmyk_cyan_weight']== "":
      cmyk_cyan_weight = '1.0'
    else:
      cmyk_cyan_weight = params['con_color_scheme']['cmyk_cyan_weight']
  else:
    cmyk_cyan_weight = '1.0'

  cmyk_magenta = params['con_color_scheme']['cmyk_magenta'] if 'cmyk_magenta' in params['con_color_scheme'] else 'Leave this black'

  if 'cmyk_magenta_weight' in params['con_color_scheme']:
    if params['con_color_scheme']['cmyk_magenta_weight']== "":
      cmyk_magenta_weight = '1.0'
    else:
      cmyk_magenta_weight = params['con_color_scheme']['cmyk_cyan_weight']
  else:
    cmyk_magenta_weight = '1.0'

  cmyk_yellow = params['con_color_scheme']['cmyk_yellow'] if 'cmyk_yellow' in params['con_color_scheme'] else 'Leave this black'


  if 'cmyk_yellow_weight' in params['con_color_scheme']:
    if params['con_color_scheme']['cmyk_yellow_weight']== "":
      cmyk_yellow_weight = '1.0'
    else:
     cmyk_yellow_weight = params['con_color_scheme']['cmyk_yellow_weight']
  else:
    cmyk_yellow_weight = '1.0'

  cmyk_brightness = params['con_color_scheme']['cmyk_brightness'] if 'cmyk_brightness' in params['con_color_scheme'] else 'Leave this black'

  if 'cmyk_brightness_weight' in params['con_color_scheme']:
    if params['con_color_scheme']['cmyk_brightness_weight']== "":
      cmyk_brightness_weight = '1.0'
    else:
     cmyk_brightness_weight = params['con_color_scheme']['cmyk_brightness_weight']
  else:
    cmyk_brightness_weight = '1.0'
  
  count = len(params['con_color_scheme']['rpt_image_name']) if 'rpt_image_name' in params['con_color_scheme'] else '1'



  f.write(FOURSPACES + "Select a color scheme:" + color_scheme + NEWLINE)
  

  f.write(FOURSPACES + "Select the image to be colored red:" + rgb_red + NEWLINE)
  f.write(FOURSPACES + "Select the image to be colored green:" + rgb_green + NEWLINE)
  f.write(FOURSPACES + "Select the image to be colored blue:" + rgb_blue + NEWLINE)
  f.write(FOURSPACES + "Name the output image:" + name_output_image + NEWLINE)
  f.write(FOURSPACES + "Relative weight for the red image:" + rgb_red_weight + NEWLINE)
  f.write(FOURSPACES + "Relative weight for the green image:" + rgb_green_weight + NEWLINE)
  f.write(FOURSPACES + "Relative weight for the blue image:" + rgb_blue_weight + NEWLINE)


  f.write(FOURSPACES + "Select the image to be colored cyan:"+ cmyk_cyan  + NEWLINE)
  f.write(FOURSPACES + "Select the image to be colored magenta:"+ cmyk_magenta + NEWLINE)
  f.write(FOURSPACES + "Select the image to be colored yellow:" + cmyk_yellow  + NEWLINE)
  f.write(FOURSPACES + "Select the image that determines brightness:"+ cmyk_brightness  + NEWLINE)
  f.write(FOURSPACES + "Relative weight for the cyan image:"+ cmyk_cyan_weight + NEWLINE)
  f.write(FOURSPACES + "Relative weight for the magenta image:"+cmyk_magenta_weight + NEWLINE)
  f.write(FOURSPACES + "Relative weight for the yellow image:"+cmyk_yellow_weight + NEWLINE)
  f.write(FOURSPACES + "Relative weight for the brightness image:"+cmyk_brightness_weight + NEWLINE)

  f.write(FOURSPACES + "Hidden:" + count + NEWLINE)

  if 'rpt_image_name' in params['con_color_scheme']:
    for i in params['con_color_scheme']['rpt_image_name']:
      image_name = params['con_color_scheme']['rpt_image_name']['image_name'] 
      if 'color' in params['con_color_scheme']['rpt_image_name']:
        color = params['con_color_scheme']['rpt_image_name']['color'] 
      else:
        color = '#FF0000'

      if 'weight' in params['con_color_scheme']['rpt_image_name']:
        weight = params['con_color_scheme']['rpt_image_name']['weight'] 
      else:
        weight = '1.0'
  else:
    image_name = 'None'
    color = '#FF0000'
    weight = '1.0'

  f.write(FOURSPACES + "Image name:" + image_name + NEWLINE)
  f.write(FOURSPACES + "Color:" + color + NEWLINE)
  f.write(FOURSPACES + "Weight:" + weight + NEWLINE)


with open(input_pipeline) as fin:
  lines = fin.readlines()
  
  k,v= lines[4].strip().split(':')

  module_count = int(v)
  new_count = module_count+1
  lines[4]= k+":"+str(new_count)+"\n"
  
  with open("output","w") as f:
    f.writelines(lines)
    writegtc()

f.close() 
 </configfile>    
</configfiles>
  <command><![CDATA[
    python $script_file $inputs $input_pipeline
  ]]></command>
  <inputs>

      <expand macro="input_pipeline_macro" />
      <conditional name="con_color_scheme">
        <param name="color_scheme" label="Select a color scheme" type="select">
          <option value="RGB">RGB</option>
          <option value="CMYK">CMYK</option>
          <option value="Stack">Stack</option>
          <option value="Composite">Composite</option>
        </param>
        <when value="RGB">
          <expand macro="rgb" />
        </when>
        <when value="CMYK">
          <expand macro="cmyk" />
        </when>
        <when value="Stack">
          <expand macro="stack" />
        </when>
        <when value="Composite">
          <expand macro="composite" />
        </when>                        
      </conditional>
     
  </inputs>

  <outputs>
	<expand macro="output_pipeline_macro" />
  </outputs>

  <stdio>
    <exit_code range="1:" level="fatal" description="Error occured"/>
  </stdio>
  <tests>

  </tests>
  <help>
    This tool append the GrayToColor module section to an existing pipeline file (.cppipe).

    Input: existing pipeline file

    Output: new pipeline file

    Combine this tool with "Common" and "CellProfiler" together to run the module alone.
  </help>
</tool>

