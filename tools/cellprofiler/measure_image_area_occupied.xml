<tool id="cp_measure_image_area_occupied" name="MeasureImageAreaOccupied" version="@CP_VERSION@">
    <description>measures the total area in an image that is occupied by objects</description>

    <macros>
        <import>macros.xml</import>
    </macros>

    <expand macro="requirements" version="@PY_VERSION@" package="python" />
    <expand macro="stdio" />
    <expand macro="cmd_modules" />

    <configfiles>
        <inputs name="inputs" />
         <configfile name="script_file">
import json
import sys
import os

FOURSPACES=@SPACES@
NEWLINE=@NEWLINE@

input_json_path = sys.argv[1]
input_pipeline= sys.argv[2]

params = json.load(open(input_json_path, "r"))

def writemoss():
  f.write(NEWLINE)

  f.write("MeasureImageAreaOccupied:[module_num:"+str(new_count)+"|svn_version:\\'Unknown\\'|variable_revision_number:4|show_window:False|notes:\\x5B\\x5D|batch_state:array(\\x5B\\x5D, dtype=uint8)|enabled:True|wants_pause:False]"+NEWLINE)  

  hidden = str(len(params['rpt_area']))

  f.write(FOURSPACES + "Hidden:"+hidden+NEWLINE)

  for area in params['rpt_area']:
    f.write(FOURSPACES+"Measure the area occupied in a binary image, or in objects?:"+area['con_area']['objects_or_image']+NEWLINE)

    obj_flag = area['con_area']['objects_or_image']

    if obj_flag =="Objects":
      f.write(FOURSPACES+"Select objects to measure:"+area['con_area']['objects_to_measure']+NEWLINE)
      f.write(FOURSPACES+"Select a binary image to measure:None"+NEWLINE)
    else:
      f.write(FOURSPACES+"Select objects to measure:None"+NEWLINE)
      f.write(FOURSPACES+"Select a binary image to measure:"+area['con_area']['image_to_measure']+NEWLINE)

with open(input_pipeline) as fin:
  lines = fin.readlines()
  
  k,v= lines[4].strip().split(':')

  module_count = int(v)
  new_count = module_count+1
  lines[4]= k+":"+str(new_count)+"\n"
  with open("output","w") as f:
    f.writelines(lines)
    writemoss()

f.close() 
        </configfile>    
    </configfiles>

    <inputs>
        <expand macro="input_pipeline_macro" />
        <repeat name="rpt_area" title="Add another area">
            <conditional name="con_area">
                <param name="objects_or_image" label="Measure the area occupied in a binary image, or in objects?" type="select">
                    <option value="Binary image">Binary image</option>
                    <option value="Objects">Objects</option>
                </param>
                <when value="Objects">
                    <param name="objects_to_measure" label="Select objects to measure" type="text">
                        <expand macro="text_validator" />
                    </param>
                </when>
                <when value="Binary image">
                    <param name="image_to_measure" label="Select a binary image to measure" type="text">
                        <expand macro="text_validator" />
                    </param>
                </when>
            </conditional>
        </repeat>
  </inputs>

    <outputs>
        <expand macro="output_pipeline_macro" />
    </outputs>

    <tests>
        <test>
            <expand macro="test_input_pipeline_param" />
            <repeat name="rpt_area">
                <conditional name="con_area">
                    <param name="objects_or_image" value="Objects" />
                    <param name="objects_to_measure" value="Nuclei" />
                </conditional>
            </repeat>
            <repeat name="rpt_area">
                <conditional name="con_area">
                    <param name="objects_or_image" value="Objects" />
                    <param name="objects_to_measure" value="Nucleoli" />
                </conditional>
            </repeat>
            <expand macro="test_out_file" file="measure_image_area_occupied.txt" />
        </test>
    </tests>

    <expand macro="help" module="MeasureImageAreaOccupied" />
    <expand macro="citations" />
</tool>
