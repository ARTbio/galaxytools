<tool id="cp-enhanceorsuppressfeatures" name="EnhanceOrSuppressFeatures" version="19.05">
  <description>module of CellProfiler v3.1.9</description>
  <requirements>
     <requirement type="package" version="2.7.16">python</requirement>
  </requirements>
  <macros>
    <import>macros.xml</import>

    <xml name="feature_speckles">
      <param name="speckles_feature_size" label="Feature size" type="text" />
      <param name="speed_accuracy" label="Speed and accuracy" type="select">
        <option value="Fast">Fast</option>
        <option value="Slow">Slow</option>
      </param>
    </xml>
    <xml name="feature_neurites">
      <conditional name="con_feature_neurites">
          <param name="enhancement_method" label="Enhancement method" type="select">
            <option value="Tubeness">Tubeness</option>
            <option value="Line structures">Line structures</option>
          </param>
          <when value="Tubeness">
             <param name="tube_smoothing_scale" label="Smoothing scale" type="text" />
          </when>
          <when value="Line structures">
             <param name="line_structures_feature_size" label="Feature size" type="text" />
          </when>
     </conditional>
    </xml>
    <xml name="feature_darkholes">
      <param name="min_hole_size" label="Minimum hole size" type="text" />
      <param name="max_hole_size" label="Maximum hole size" type="text" />
    </xml>  
    <xml name="feature_circle">
      <param name="circle_feature_size" label="Feature size" type="text" />
    </xml>     
    <xml name="feature_texture">
      <param name="texture_smoothing_scale" label="Smoothing scale" type="text" />
    </xml>
    <xml name="feature_dic">
      <param name="dic_smoothing_scale" label="Smoothing scale" type="text" />
      <param name="dic_shear_angle" label="Shear angle" type="text" />
      <param name="dic_decay" label="Decay" type="text" />
    </xml>      
  </macros>
  <configfiles>
    <inputs name="inputs" filename="input.json" />
 <configfile name="script_file">
import json
import sys
import os

FOURSPACES="    "
NEWLINE="\n"

input_json_path = sys.argv[1]
input_pipeline= sys.argv[2]

params = json.load(open(input_json_path, "r"))

def writeesf():
  f.write(NEWLINE)

  f.write("EnhanceOrSuppressFeatures:[module_num:"+str(new_count)+"|svn_version:\\'Unknown\\'|variable_revision_number:6|show_window:False|notes:\\x5B\\'Identify nucleoli\\', \\'PARAMS\\x3A Range of hole sizes\'\\x5D|batch_state:array(\\x5B\\x5D, dtype=uint8)|enabled:True|wants_pause:False]"+NEWLINE)  

  f.write(FOURSPACES + "Select the input image:" + params['input_image']+ NEWLINE)
  f.write(FOURSPACES + "Name the output image:" + params['name_output_image']+ NEWLINE)

  operation = params['con_enhance_suppress']['select_operation']
  f.write(FOURSPACES + "Select the operation:" + operation + NEWLINE)
  
  con_feature_type = params['con_enhance_suppress']['con_feature_type']

  if operation == "Suppress":
    f.write(FOURSPACES + "Feature size:" + params['con_enhance_suppress']['feature_size'] + NEWLINE)
    ## Below values are not used in this case, but required by CP pipeline file to be 
    ## present as some sorts of "default" values
    f.write(FOURSPACES + "Feature type:Speckles" + NEWLINE)
    f.write(FOURSPACES + "Range of hole sizes:1,10" + NEWLINE)
    f.write(FOURSPACES + "Smoothing scale:2.0" + NEWLINE)
    f.write(FOURSPACES + "Shear angle:0.0" + NEWLINE)
    f.write(FOURSPACES + "Decay:0.95" + NEWLINE)
    f.write(FOURSPACES + "Enhancement method:Tubeness" + NEWLINE)
    f.write(FOURSPACES + "Speed and accuracy:Fast" + NEWLINE)
  elif operation == "Enhance":
    feature_type=con_feature_type['feature_type']

    if feature_type =="Speckles":
      f.write(FOURSPACES + "Feature size:" + con_feature_type['speckles_feature_size'] + NEWLINE)
      f.write(FOURSPACES + "Feature type:" + feature_type + NEWLINE)
      f.write(FOURSPACES + "Range of hole sizes:1,10" + NEWLINE)
      f.write(FOURSPACES + "Smoothing scale:2.0" + NEWLINE)
      f.write(FOURSPACES + "Shear angle:0.0" + NEWLINE)
      f.write(FOURSPACES + "Decay:0.95" + NEWLINE)
      f.write(FOURSPACES + "Enhancement method:Tubeness" + NEWLINE)
      f.write(FOURSPACES + "Speed and accuracy:"+ con_feature_type['speed_accuracy'] + NEWLINE)
    elif feature_type == "Neurites":
      enhancement_metehod = con_feature_type['con_feature_neurites']['enhancement_method']
      if enhancement_method == "Tubeness":
        f.write(FOURSPACES + "Feature size:10" + NEWLINE)
        f.write(FOURSPACES + "Feature type:" + feature_type + NEWLINE)
        f.write(FOURSPACES + "Range of hole sizes:1,10" + NEWLINE)
        f.write(FOURSPACES + "Smoothing scale:" + con_feature_type['con_feature_neurites']['tube_smoothing_scale']+ NEWLINE)
        f.write(FOURSPACES + "Shear angle:0.0" + NEWLINE)
        f.write(FOURSPACES + "Decay:0.95" + NEWLINE)
        f.write(FOURSPACES + "Enhancement method:"+ enhancement_method + NEWLINE)
        f.write(FOURSPACES + "Speed and accuracy:Fast" + NEWLINE)
      elif enhancement_method == "Line structures":
        f.write(FOURSPACES + "Feature size:"+ con_feature_type['con_feature_neurites']['line_structures_feature_size'] + NEWLINE)
        f.write(FOURSPACES + "Feature type:" + feature_type + NEWLINE)
        f.write(FOURSPACES + "Range of hole sizes:1,10" + NEWLINE)
        f.write(FOURSPACES + "Smoothing scale:2.0" + NEWLINE)
        f.write(FOURSPACES + "Shear angle:0.0" + NEWLINE)
        f.write(FOURSPACES + "Decay:0.95" + NEWLINE)
        f.write(FOURSPACES + "Enhancement method:"+ enhancement_method + NEWLINE)
        f.write(FOURSPACES + "Speed and accuracy:Fast" + NEWLINE)
    elif feature_type == "Dark holes":   
        f.write(FOURSPACES + "Feature size:10"+ NEWLINE)
        f.write(FOURSPACES + "Feature type:" + feature_type + NEWLINE)
        f.write(FOURSPACES + "Range of hole sizes:"+con_feature_type['min_hole_size']+","+con_feature_type['max_hole_size'] + NEWLINE)
        f.write(FOURSPACES + "Smoothing scale:2.0" + NEWLINE)
        f.write(FOURSPACES + "Shear angle:0.0" + NEWLINE)
        f.write(FOURSPACES + "Decay:0.95" + NEWLINE)
        f.write(FOURSPACES + "Enhancement method:Tubeness"+ NEWLINE)
        f.write(FOURSPACES + "Speed and accuracy:Fast" + NEWLINE)
    elif feature_type == "Circles":   
        f.write(FOURSPACES + "Feature size:"+con_feature_type['circle_feature_size']+ NEWLINE)
        f.write(FOURSPACES + "Feature type:" + feature_type + NEWLINE)
        f.write(FOURSPACES + "Range of hole sizes:1,10" + NEWLINE)
        f.write(FOURSPACES + "Smoothing scale:2.0" + NEWLINE)
        f.write(FOURSPACES + "Shear angle:0.0" + NEWLINE)
        f.write(FOURSPACES + "Decay:0.95" + NEWLINE)
        f.write(FOURSPACES + "Enhancement method:Tubeness"+ NEWLINE)
        f.write(FOURSPACES + "Speed and accuracy:Fast" + NEWLINE)    
    elif feature_type == "Texture":   
        f.write(FOURSPACES + "Feature size:10"+NEWLINE)
        f.write(FOURSPACES + "Feature type:" + feature_type + NEWLINE)
        f.write(FOURSPACES + "Range of hole sizes:1,10" + NEWLINE)
        f.write(FOURSPACES + "Smoothing scale:"+con_feature_type['texture_smoothing_scale'] + NEWLINE)
        f.write(FOURSPACES + "Shear angle:0.0" + NEWLINE)
        f.write(FOURSPACES + "Decay:0.95" + NEWLINE)
        f.write(FOURSPACES + "Enhancement method:Tubeness"+ NEWLINE)
        f.write(FOURSPACES + "Speed and accuracy:Fast" + NEWLINE)     
    elif feature_type == "DIC":   
        f.write(FOURSPACES + "Feature size:10"+NEWLINE)
        f.write(FOURSPACES + "Feature type:" + feature_type + NEWLINE)
        f.write(FOURSPACES + "Range of hole sizes:1,10" + NEWLINE)
        f.write(FOURSPACES + "Smoothing scale:"+con_feature_type['dic_smoothing_scale'] + NEWLINE)
        f.write(FOURSPACES + "Shear angle:"+con_feature_type['dic_shear_angle'] + NEWLINE)
        f.write(FOURSPACES + "Decay:"+con_feature_type['dic_decay'] + NEWLINE)
        f.write(FOURSPACES + "Enhancement method:Tubeness"+ NEWLINE)
        f.write(FOURSPACES + "Speed and accuracy:Fast" + NEWLINE)                  


with open(input_pipeline) as fin:
  lines = fin.readlines()
  
  k,v= lines[4].strip().split(':')

  module_count = int(v)
  new_count = module_count+1
  lines[4]= k+":"+str(new_count)+"\n"
  
  with open("output","w") as f:
    f.writelines(lines)
    writeesf()

f.close() 
 </configfile>    
</configfiles>
  <command><![CDATA[
    python $script_file $inputs $input_pipeline
  ]]></command>
  <inputs>

      <expand macro="input_pipeline_macro"/>
      <param name="input_image" type="text" label="Select the input image" />

      <param name="name_output_image" type="text" label="Name the output image" />

      <conditional name="con_enhance_suppress">
        <param name="select_operation" label="Select the operation" type="select">
          <option value="Enhance">Enhance</option>
          <option value="Suppress">Suppress</option>
        </param>

        <when value="Enhance">
           <conditional name="con_feature_type">
            <param name="feature_type" type="select" label="Feature type">
              <option value="Speckles">Speckles</option>
              <option value="Neurites">Neurites</option>
              <option value="Dark holes">Dark holes</option>
              <option value="Circles">Circles</option>
              <option value="Texture">Texture</option>
              <option value="DIC">DIC</option>
            </param>
             <when value="Speckles">
              <expand macro="feature_speckles" />
            </when>
            <when value="Neurites">
              <expand macro="feature_neurites" />
            </when>
            <when value="Dark holes">
              <expand macro="feature_darkholes" />
            </when>
            <when value="Circles">
              <expand macro="feature_circle" />
            </when>
            <when value="Texture">
              <expand macro="feature_texture" />
            </when>
            <when value="DIC">
              <expand macro="feature_dic" />
            </when> 
          </conditional>
        </when>

        <when value="Suppress">
          <param name="feature_size" type="text" label="Feature size" />
        </when>

      </conditional>
      
  </inputs>

  <outputs>
  	<expand macro="output_pipeline_macro" />
  </outputs>

  <stdio>
    <exit_code range="1:" level="fatal" description="Error occured"/>
  </stdio>
  <tests>

  </tests>
  <help>
    This tool append the EnhanceOrSuppressFeatures module section to an existing pipeline file (.cppipe).

    Input: existing pipeline file

    Output: new pipeline file

    Combine this tool with "Common" and "CellProfiler" together to run the module alone.
  </help>
</tool>

